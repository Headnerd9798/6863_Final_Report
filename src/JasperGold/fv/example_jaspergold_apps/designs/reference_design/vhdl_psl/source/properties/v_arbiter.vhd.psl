vunit v_arbiter (arbiter(rtl)) {

  default clock is rose(clk);

  -- Assertion "grant_is_onehot0"
  --  Grant signal is one-hot or zero
  --
  property grant_is_onehot0 is onehot0(gnt);
  a_grant_is_onehot0: assert always grant_is_onehot0;

  -- Assertion "grant_is_one_cycle"
  --  Grant signal is high for one cycle only
  --
  property grant_is_one_cycle is (gnt/="0000")  -> next(gnt="0000");
  a_grant_is_one_cycle: assert always grant_is_one_cycle;

  -- Functional coverage points
  --
  -- Request
  c_req0: cover {req(0)};
  c_req1: cover {req(1)};
  c_req2: cover {req(2)};
  c_req3: cover {req(3)};
  --
  -- Grant
  c_gnt0: cover {gnt(0)};
  c_gnt1: cover {gnt(1)};
  c_gnt2: cover {gnt(2)};
  c_gnt3: cover {gnt(3)};
  --
  -- Control signals
  c_int_ready: cover {int_ready};
  c_int_valid: cover {int_valid};
  c_trans_started: cover {trans_started};
  --

} -- v_arbiter


-- -------------------------------------------------------
-- Copyright (c) 2017 Cadence Design Systems, Inc.
--
-- All rights reserved.
--
-- Cadence Design Systems Proprietary and Confidential.
-- -------------------------------------------------------

